<serialization jsxversion="3.5" xmlns="urn:tibco.com/v3.0">
  <name><![CDATA[LayoutSample (--)]]></name>
  <icon></icon>
  <description><![CDATA[2 top-over-bottom panes in an adaptive layout grid.]]></description>
  <onBeforeDeserialize></onBeforeDeserialize>
  <onAfterDeserialize></onAfterDeserialize>
  <object type="jsx3.gui.LayoutGrid">
    <variants jsxrepeat="2" jsxsizearray="['30%','*']" jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2" jsxbestguess="1" jsxorientation="0"></variants>
    <strings jsxname="layoutSample (--)" jsxwidth="100%" jsxheight="100%" jsxrows="30%,*"></strings>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="1"></variants>
      <strings jsxname="paneDescription" jsxwidth="100%" jsxheight="100%" jsxtext="&lt;P align=&quot;right&quot;&gt; &lt;B&gt;Search in list: version 2.1&lt;/B&gt;&lt;BR&gt;&#xA;JSX version: 3.4.0&lt;/P&gt;&#xA;&lt;p&gt;&#xA;This sample application demonstrates how to search for a text in a CDF document and to highlight the matched record. This method can be used for any jsx3.gui component that has a CDF Record as input like list or grid.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;To perform this task a custom XSLT template has been used to find the record that its jsxtext attribute matches the pattern and to return the value of its jsxid attribute as string. The search pattern is passed as XSLT parameter &lt;i&gt;searchedtext&lt;/i&gt;.  A second parameter called &lt;i&gt;resultindex&lt;/i&gt; is passed to the XSLT template that specifies the position of the record. Each time the Find Next button is clicked &lt;i&gt;resultindex&lt;/i&gt;  will increment at one, so the user can  repeat the search and find the next occurrence in the CDF document.&#xA;For example the fifth click of the Find Next button will find the fifth record that matches the pattern.&#xA;&lt;p&gt;&#xA; If nothing has been found and the result index is grater then one the message 'End of search' will be displayed, otherwise the message 'Text not found' that indicates there isn't any occurrences at all will be displayed.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;User can type a new text in the text field and press enter to begin a new search.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;To use this custom XSLT the jsx3.gui.processor class has been used. This class offers developer simple methods that he/she can use to transform a XML document using a XSLT template. &#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Finally the method jsx3.gui.Matrix.focusRowById(strRECORDID) highlights the matched record.&#xA;&lt;/p&gt;"></strings>
      <dynamics jsxborder="@Outset" jsxbgcolor="@Solid Medium" jsxpadding="@8Pixel"></dynamics>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="1"></variants>
      <strings jsxname="paneApp" jsxwidth="100%" jsxheight="100%"></strings>
      <dynamics jsxborder="@Outset"></dynamics>
      <object type="jsx3.gui.LayoutGrid">
        <variants jsxrepeat="4" jsxsizearray="['25','65','*','15']" jsxleft="0" jsxtop="0" jsxoverflow="2" jsxorientation="0"></variants>
        <strings jsxname="layout (--)" jsxwidth="100%" jsxheight="100%" jsxrows="25,*,200,15"></strings>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"></variants>
          <strings jsxname="pane" jsxwidth="100%" jsxheight="100%"></strings>
          <dynamics jsxborder="@Outset"></dynamics>
          <object type="jsx3.gui.TextBox">
            <variants jsxheight="18"></variants>
            <strings jsxname="searchbox" jsxmargin="margin-right:4px;" jsxvalue="Content 0"></strings>
            <events jsxincchange="" jsxchange="" jsxexecute="eg.search.selectRecord(this.getValue(),true);"></events>
          </object>
          <object type="jsx3.gui.Button">
            <variants jsxindex="0" jsxheight="18"></variants>
            <strings jsxname="button" jsxtext="Find Next" jsxmargin="margin-right:4px;"></strings>
            <events jsxexecute="eg.search.selectRecord(eg.search.getServer().getJSXByName('searchbox').getValue(),false);"></events>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1"></variants>
          <strings jsxname="pane" jsxwidth="100%" jsxheight="100%"></strings>
          <dynamics jsxborder="@Outset"></dynamics>
          <object type="jsx3.gui.Matrix">
            <variants jsxpagingmodel="1" jsxselectionmodel="2" jsxscalewidth="1"></variants>
            <strings jsxname="list" jsxbodyborder="1px solid #dfdfef" jsxheaderborder="1px solid #dfdfef" jsxbgcolor="#efefff" jsxfocusstyle="font-weight:bold;color:orange" jsxxmlurl="xml/source.xml" jsxxmlid="cachedlist"></strings>
            <events jsxexecute="jsx3.log('EVENT: (jsxexecute). Record: ' + strRECORDID);"></events>
            <xslparameters jsx_rowbg1="#ffffff" jsx_rowbg2="#efefff"></xslparameters>
            <object type="jsx3.gui.Matrix.Column">
              <variants jsxwidth="74" jsxresize="1"></variants>
              <strings jsxname="mc1" jsxtext="Data" jsxcellpadding="2" jsxpath="jsxtext" jsxvaluetemplate=""></strings>
              <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown" jsxbgcolor="@Solid Disabled"></dynamics>
            </object>
            <object type="jsx3.gui.Matrix.Column">
              <variants></variants>
              <strings jsxname="mc2" jsxtext="JSXID" jsxpadding="2" jsxwidth="*" jsxcellpadding="2"></strings>
              <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown" jsxbgcolor="@Solid Disabled"></dynamics>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"></variants>
          <strings jsxname="block" jsxwidth="100%" jsxheight="100%"></strings>
          <object type="jsx3.gui.Splitter">
            <variants jsxleft="0" jsxtop="0"></variants>
            <strings jsxname="splitter ( | )" jsxsubcontainer1pct="51.77%" jsxsubcontainer2pct="48.23%"></strings>
            <object type="jsx3.gui.BlockX">
              <variants jsxrelativeposition="1" jsxoverflow="1"></variants>
              <strings jsxname="blockX" jsxxmlurl="xsl/findrecordid.xsl" jsxwidth="100%" jsxheight="100%"></strings>
              <dynamics jsxbgcolor="@Solid Light" jsxpadding="@8Pixel"></dynamics>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="3"></variants>
              <strings jsxname="pane" jsxwidth="100%" jsxheight="100%"></strings>
              <dynamics jsxborder="@Inset"></dynamics>
              <object type="jsx3.gui.TextBox">
                <variants jsxrelativeposition="1" jsxtype="1" jsxoverflow="3"></variants>
                <strings jsxname="textbox" jsxwidth="100%" jsxvalue="jsx3.lang.Package.definePackage(&#xA;  &quot;eg.search&quot;,                //the full name of the package to create&#xA;  function(search) {          //name the argument of this function&#xA;  /**&#xA;   * Position of the record in the CDF document to be returned&#xA;   */&#xA;  var resultIndex = 1;&#xA;  &#xA;  /**&#xA;   * Returns the application server object which by default is the application&#xA;   * namespace as specified in Project-&gt;Deployment Options.&#xA;   *&#xA;   * @returns {jsx3.app.Server} the application server object.&#xA;   */&#xA;   search.getServer = function() {&#xA;    // should be the same as namespace in Project -&gt; Deployment Options&#xA;    return eg.search.SERVER;&#xA;   };&#xA;  &#xA; /**&#xA;  * Finds and focuses the first or next found record in list. &#xA;  * @param strSearched {String} Text to find&#xA;  * @param bReset {boolean} if true search from begining.&#xA;  */&#xA;  search.selectRecord = function(strSearched, bReset) {&#xA;    if(bReset) search.resetResult();&#xA;    var mylist =  search.getServer().getJSXByName('list');&#xA;    var objXSL =  new jsx3.xml.Document();&#xA;    objXSL.load(search.getServer().resolveURI('xsl/findrecordid.xsl'));&#xA;    var objXML =  search.getServer().getCache().getDocument(&quot;cachedlist&quot;);&#xA;    var params= {'searchedtext':strSearched, 'resultindex':resultIndex}&#xA;    var objPROC = new jsx3.xml.Template(objXSL);&#xA;    objPROC.setParams(params);&#xA;    var strRECORDID = objPROC.transform(objXML);&#xA;    jsx3.log(&quot;id = &quot; + strRECORDID);&#xA;    if (strRECORDID){&#xA;      resultIndex++;&#xA;      mylist.focusRowById(strRECORDID)&#xA;      mylist.setFocusStyle('font-weight:bold;color:orange')&#xA;    }&#xA;    else{&#xA;      var message = (resultIndex == 1)?'Text not found':'End of search'&#xA;      search.resetResult();&#xA;      search.getServer().alert(message,message)&#xA;    }&#xA;  } &#xA;&#xA;/**&#xA; * Resets the search index to 1&#xA; */&#xA;  search.resetResult = function() {&#xA;    resultIndex = 1 ;&#xA;  }&#xA;&#xA;})" jsxheight="100%"></strings>
                <dynamics jsxpadding="@8Pixel"></dynamics>
              </object>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"></variants>
          <strings jsxname="display" jsxwidth="100%" jsxheight="100%"></strings>
        </object>
      </object>
    </object>
  </object>
</serialization>