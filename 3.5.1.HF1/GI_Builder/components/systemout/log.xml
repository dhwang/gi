<?xml version="1.0" ?>
<!--
  ~ Copyright (c) 2001-2007, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  -->
<serialization xmlns="urn:tibco.com/v3.0">
  <name><![CDATA[]]></name>
  <icon><![CDATA[]]></icon>
  <description><![CDATA[]]></description>
  <onBeforeDeserialize><![CDATA[]]></onBeforeDeserialize>
  <onAfterDeserialize><![CDATA[

objJSX.log = function(strMessage, intLevel) {
  var objGUI = this.getRendered();
  if (!objGUI) return;
  var levelClass = intLevel ? (" jsxide_" + jsx3.util.Logger.levelAsString(intLevel)) : "";

  jsx3.html.insertAdjacentHTML(objGUI, 'beforeEnd', 
      '<pre class="jsxide_sysout' + levelClass + '">' + strMessage + '</pre>');

  this.setText(objGUI.innerHTML, false);
  this.showLast();
};

objJSX.showLast = function() {
	// only ever queue one timeout as an optimization
	jsx3.sleep(function() { jsx3.ide.scrollDownToLastDomChild(this); }, "jsx3.ide.syslog.showlast", this);
};

objJSX.shift = function(intCount) {
  if (intCount == null) intCount = 1;
  
  var objGUI = this.getRendered();
  for (var i = 0; i < intCount; i++) {
    objGUI.removeChild(objGUI.childNodes[0]);
  };
};

objJSX.clear = function(intCount) {
  this.setText("", false);
  this.getRendered().innerHTML = "";
};

objJSX.transfer = function(objBlock) {
  objBlock.setText(this.getRendered().innerHTML, true);
	this.showLast();
};

objJSX.getSize = function(strMessage) {
  var objGUI = this.getRendered();
  return objGUI.childNodes.length;
};

 ]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <dynamics jsxbgcolor="@Solid Light"/>
      <variants jsxoverflow="1" jsxfontsize="11"/>
      <strings jsxname="jsx_ide_systemout" jsxwidth="100%" jsxheight="100%" jsxpadding="2 4 2 4"
          jsxmenu="jsxmenu_systemout"/>
    </object>
</serialization>
