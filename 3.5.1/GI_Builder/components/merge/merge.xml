<?xml version="1.0" ?>
<!--
  ~ Copyright (c) 2001-2007, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  -->
<serialization xmlns="urn:tibco.com/v3.0">
 <name><![CDATA[]]></name>
 <icon><![CDATA[]]></icon>
 <description><![CDATA[]]></description>
 <onBeforeDeserialize><![CDATA[]]></onBeforeDeserialize>
 <onAfterDeserialize><![CDATA[


objJSX.doBrowse = function(jsxid,bSave) {
  jsx3.require("jsx3.io.FileDialog");
  var d = jsx3.io.FileDialog.deserialize(jsx3.IDE.getRootBlock(), "mergetooldialog", true);

  //force to the project (jsxapp) namespace
  var appFolder = jsx3.ide.getProjectDirectory();
  d.jsxid = jsxid

  var me = this;
  d.onExecute = function(objFile) {
    me.onBrowseChoose(objFile, appFolder,d.jsxid,bSave);
    jsx3.ide.setCurrentDirectory(objFile.getParentFile());
  };

  if(bSave) {
    d.setDialogTitle("Save Document");
    d.setExecButtonLabel("Save");
    d.openForSave(appFolder, appFolder, jsx3.io.FileDialog.CHOOSE_FILE);
  } else {
    d.setDialogTitle("Open Document");
    d.setExecButtonLabel("Open");
    d.openForOpen(appFolder, appFolder, jsx3.io.FileDialog.CHOOSE_FILE);
  }
};


objJSX.onBrowseChoose = function(objFile, appFolder,jsxid,bSave) {
  if (bSave) {
    // TODO: add encoding to XML document?
    jsx3.ide.writeUserFile(objFile, jsx3.GO(jsxid).getValue());
  } else {
    //resolve to the jsxapp namesapce
    var strPath = appFolder.relativePathTo(objFile);
    jsx3.GO(jsxid).setValue("jsxapp:///" + strPath);
  }
};


//get list of all cache documents for the active server/project
objJSX.getCacheList = function(strJSXId) {
  var objServer = jsx3.ide.getActiveServer();
  if(objServer) {
    //reset data for list (listing of all cache docs)
    var objSel = this.getDescendantOfName(strJSXId);
    objSel.clearXmlData(false);

    //iterate to populate
    var objCache = objServer.getCache();
    var keys = objCache.keys();
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (objSel.getRecordNode(key) == null) {
        var o = {};
        o.jsxid = key;
        o.jsxtext = key;
        objSel.insertRecord(o,null,false);
      }
    }

    //repaint the tree
    objSel.repaint();
  }
};


objJSX.doMerge = function() {
  var objXML = this.getMergeDocument("jsx_merge_xml");
  var objXSL = this.getMergeDocument("jsx_merge_xsl");

  if(objXML && objXSL) {
    this.getDescendantOfName("jsx_merge_xml_raw").setValue(objXML.toString());
    this.getDescendantOfName("jsx_merge_xsl_raw").setValue(objXSL.toString());
    var strOutput = objXML.transformNode(objXSL);
    this.getDescendantOfName("jsx_merge_rendered").setText(strOutput,true);
    this.getDescendantOfName("jsx_merge_raw").setValue(strOutput);
  }
};


objJSX.getMergeDocument = function(strJSXId) {
  //determine where the XML source document will come from (the radio button that's selected will have a value that represents the name of the formfield to use)
  strJSXId = jsx3.gui.RadioButton.getValue(strJSXId);
  var strValue = this.getDescendantOfName(strJSXId).getValue();
  var objXML;
  if(strJSXId.indexOf("_url") > -1) {
    objXML = new jsx3.xml.Document();
    objXML.setAsync(false);
    objXML.load(strValue);
    if(objXML.hasError()) {
      jsx3.util.Logger.doLog("MERGE01","The XML document located at, <b>" + strValue + "</b>, could not be parsed due to the following reason(s):<br/>" + objXML.getError());
      return;
    }
  } else if(jsx3.ide.getActiveServer() && strJSXId.indexOf("_cache") > -1) {
    objXML = jsx3.ide.getActiveServer().getCache().getDocument(strValue);
  } else if(strJSXId.indexOf("_cache") > -1) {
    jsx3.util.Logger.doLog("MERGE04","There is no active GUI component being edited within Builder. First activate a component, so its related cache can be queried for a source document to use in the merge.");
    return;
  } else if(strJSXId.indexOf("_script") > -1) {
    objXML = jsx3.eval(strValue);
    if(objXML == null) {
      jsx3.util.Logger.doLog("MERGE02","The script used to generate the source document for the 'Merge Tool' is returning null.");
      return;
    } else if(typeof(objXML.getRootNode) != "function") {
      jsx3.util.Logger.doLog("MERGE03","The script used to generate the source document for the 'Merge Tool' is not returning a valid <b>jsx3.xml.Entity</b> or <b>jsx3.xml.Document</b> instance.");
      return;
    }
  } else {
    objXML = new jsx3.xml.Document();
    objXML.loadXML(strValue);
    if(objXML.getError().code != "0") {
      jsx3.util.Logger.doLog("MERGE01","The document that was entered into the 'Merge Tool' could not be parsed due to the following reason(s):<br/>" + objXML.getError());
      return;
    }
  }
  return objXML;
};

]]></onAfterDeserialize>
  <object type="jsx3.gui.Dialog">
   <dynamics jsxbgcolor="@Solid Medium"/>
   <variants jsxwidth="755" jsxheight="423" jsxzindex="5004" jsxminx="600" jsxminy="400"/>
   <strings jsxname="jsxdialog" jsxhelpid="ide.merge"/>
    <object type="jsx3.gui.WindowBar">
     <variants/>
     <strings jsxname="jsxcbar" jsxtext="XML/XSL Merge Tool"/>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics/>
       <strings jsxname="jsxtoolbutton" jsxtip="Show/hide input controls" jsximage="GI_Builder/images/prototypes/menubar.gif"/>
       <events jsxexecute="var o = this.getAncestorOfType(jsx3.gui.Dialog).getDescendantOfName('jsxlayout_merge'); if(o.getDimensionArray()[0] == 0) { o.setDimensionArray(['48','160','32','*'],true); } else { o.setDimensionArray([0,0,0,'*'],true); }"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
       <variants jsxdivider="1"/>
       <strings jsxname="jsxminbutton"/>
       <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doToggleState();"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsxtip="jsx3.gui.Dialog.max"/>
       <strings jsxname="jsxmaxbutton" jsximage="JSX/images/dialog/max.gif"/>
       <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doMaximize(this);"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsximage="@Close Icon" jsxtip="jsx3.gui.Dialog.close"/>
       <strings jsxname="jsxclosebutton"/>
       <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doClose();"/>
      </object>
    </object>
    <include src="components/merge/_merge.xml" async="true"/>
  </object>
</serialization>
