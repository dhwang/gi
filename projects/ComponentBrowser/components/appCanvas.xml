<serialization xmlns="urn:tibco.com/v3.0" jsxversion="3.9">
  <onAfterDeserialize><![CDATA[
if (typeof window['_fromLaunchHtml'] != 'undefined' && typeof window['dhtmlHistory'] == 'undefined') {
jsx3.require("jsx3.util.Dojo");
jsx3.util.Dojo.load();

(function(){
  dojo.provide("dojo.hash");
  //TODOC: where does this go?
  // summary:
  //		Methods for monitoring and updating the hash in the browser URL.
  //
  // example:
  //		dojo.subscribe("/dojo/hashchange", context, callback);
  //
  //		function callback (hashValue){
  //			// do something based on the hash value.
  // 		}

  dojo.hash = function(/* String? */ hash, /* Boolean? */ replace){
    //	summary:
    //		Gets or sets the hash string.
    //	description:
    //		Handles getting and setting of location.hash.
    //		 - If no arguments are passed, acts as a getter.
    //		 - If a string is passed, acts as a setter.
    //	hash: 
    //		String: the hash is set - #string.
    //	replace:
    //		Boolean: If true, updates the hash value in the current history 
    //			state instead of creating a new history state.
    //	returns:
    //		when used as a getter, returns the current hash string.
    //		when used as a setter, returns the new hash string.
    
    // getter
    if(!arguments.length){
      return _getHash();
    }
    // setter
    if(hash.charAt(0) == "#"){
      hash = hash.substring(1);
    }
    if(replace){
      _replace(hash);
    }else{
      location.href = "#" + hash;
    }
    return hash; // String
  }

  // Global vars
  var _recentHash = null,
    _ieUriMonitor = null,
    _pollFrequency = dojo.config.hashPollFrequency || 100;

  //Internal functions
  function _getHash(){
    var h = location.href, i = h.indexOf("#");
    return (i >= 0) ? h.substring(i + 1) : "";
  }

  function _dispatchEvent(){
    dojo.publish("/dojo/hashchange", [_getHash()]);
  }

  function _pollLocation(){
    if(_getHash() === _recentHash){
      return;
    }
    _recentHash = _getHash();
    _dispatchEvent();
  }
  
  function _replace(hash){
    if(_ieUriMonitor){
      if(_ieUriMonitor.isTransitioning()){
        setTimeout(dojo.hitch(null,_replace,hash), _pollFrequency);
        return;
      }
      var href = _ieUriMonitor.iframe.location.href;
      var index = href.indexOf('?');
      // main frame will detect and update itself
      _ieUriMonitor.iframe.location.replace(href.substring(0, index) + "?" + hash);
      return;
    }
    location.replace("#"+hash);
    _pollLocation();
  }

  function IEUriMonitor(){
    // summary:
    //		Determine if the browser's URI has changed or if the user has pressed the 
    //		back or forward button. If so, call _dispatchEvent.
    //
    //	description:
    //		IE doesn't add changes to the URI's hash into the history unless the hash
    //		value corresponds to an actual named anchor in the document. To get around
    //      this IE difference, we use a background IFrame to maintain a back-forward
    //		history, by updating the IFrame's query string to correspond to the
    //		value of the main browser location's hash value.
    //
    //		E.g. if the value of the browser window's location changes to
    //
    //		#action=someAction
    //
    //		... then we'd update the IFrame's source to:
    //
    //		?action=someAction
    //
    //		This design leads to a somewhat complex state machine, which is
    //		described below:
    //
    //		s1: Stable state - neither the window's location has changed nor
    //			has the IFrame's location. Note that this is the 99.9% case, so
    //			we optimize for it.
    //			Transitions: s1, s2, s3
    //		s2: Window's location changed - when a user clicks a hyperlink or
    //			code programmatically changes the window's URI.
    //			Transitions: s4
    //		s3: Iframe's location changed as a result of user pressing back or
    //			forward - when the user presses back or forward, the location of
    //			the background's iframe changes to the previous or next value in
    //			its history.
    //			Transitions: s1
    //		s4: IEUriMonitor has programmatically changed the location of the
    //			background iframe, but it's location hasn't yet changed. In this
    //			case we do nothing because we need to wait for the iframe's
    //			location to reflect its actual state.
    //			Transitions: s4, s5
    //		s5:	IEUriMonitor has programmatically changed the location of the
    //			background iframe, and the iframe's location has caught up with
    //			reality. In this case we need to transition to s1.
    //			Transitions: s1
    //
    //		The hashchange event is always dispatched on the transition back to s1.
    //

    // create and append iframe
    var ifr = document.createElement("iframe"),
      IFRAME_ID = "dojo-hash-iframe",
      ifrSrc = dojo.config.dojoBlankHtmlUrl || dojo.moduleUrl("dojo", "resources/blank.html");
    ifr.id = IFRAME_ID;
    ifr.src = ifrSrc + "?" + _getHash();
    ifr.style.display = "none";
    document.body.appendChild(ifr);

    this.iframe = dojo.global[IFRAME_ID];
    var recentIframeQuery, transitioning, expectedIFrameQuery, docTitle, ifrOffline,
      iframeLoc = this.iframe.location,
      winLoc = dojo.global.location;

    function resetState(){
      _recentHash = winLoc.hash;
      recentIframeQuery = ifrOffline ? _recentHash : iframeLoc.search;
      transitioning = false;
      expectedIFrameQuery = null;
    }

    this.isTransitioning = function(){
      return transitioning;
    }
    
    this.pollLocation = function(){
      if(!ifrOffline) {
        try{
          iframeLoc.search;  //see if we can access the iframe without a permission denied error
          //good, the iframe is same origin (no thrown exception)
          if(document.title != docTitle){ //sync title of main window with title of iframe.
            docTitle = this.iframe.document.title = document.title;
          }
        }catch(e){
          //permission denied - server cannot be reached.
          ifrOffline = true;
          console.error("dojo.hash: Error adding history entry. Server unreachable.");
        }
      }
      if(transitioning && _recentHash === winLoc.hash){
        // we're in an iframe transition (s4 or s5)
        if(ifrOffline || iframeLoc.search === expectedIFrameQuery){
          // s5 (iframe caught up to main window or iframe offline), transition back to s1
          resetState();
          _dispatchEvent();
        }else{
          // s4 (waiting for iframe to catch up to main window)
          setTimeout(dojo.hitch(this,this.pollLocation),0);
          return;
        }
      }else if(_recentHash === winLoc.hash && (ifrOffline || recentIframeQuery === iframeLoc.search)){
        // we're in stable state (s1, iframe query == main window hash), do nothing
      }else{
        // the user has initiated a URL change somehow.
        // sync iframe query <-> main window hash
        if(_recentHash !== winLoc.hash){
          // s2 (main window location changed), set iframe url and transition to s4
          _recentHash = winLoc.hash;
          transitioning = true;
          expectedIFrameQuery = "?" + _getHash();
          ifr.src = ifrSrc + expectedIFrameQuery;
          ifrOffline = false;	//we're updating the iframe src - set offline to false so we can check again on next poll.
          setTimeout(dojo.hitch(this,this.pollLocation),0); //yielded transition to s4 while iframe reloads.
          return;
        }else if(!ifrOffline){
          // s3 (iframe location changed via back/forward button), set main window url and transition to s1.
          winLoc.href = "#" + iframeLoc.search.substring(1);
          resetState();
          _dispatchEvent();
        }
      }
      setTimeout(dojo.hitch(this,this.pollLocation), _pollFrequency);
    }
    resetState(); // initialize state (transition to s1)
    setTimeout(dojo.hitch(this,this.pollLocation), _pollFrequency);
  }
  if("onhashchange" in dojo.global && (!dojo.isIE || (dojo.isIE >= 8 && document.compatMode != "BackCompat"))){	//need this IE browser test because "onhashchange" exists in IE8 in IE7 mode
    dojo.connect(dojo.global,"onhashchange",_dispatchEvent);
  }else{
    if(document.addEventListener){ // Non-IE
      _recentHash = _getHash();
      setInterval(_pollLocation, _pollFrequency); //Poll the window location for changes
    }else if(document.attachEvent){ // IE7-
      //Use hidden iframe in versions of IE that don't have onhashchange event
      _ieUriMonitor = new IEUriMonitor();
    } 
    // else non-supported browser, do nothing.
  }
})();
}

var cache = tibco.ce.getCache();
var template = new jsx3.xml.Template(cache.getDocument('components_xsl'));
var objXML = template.transformToObject(cache.getDocument('components_xml'));

tibco.ce.initFromHash(objXML);

cache.setDocument('components', objXML);
treeExplorer.setXMLId('components').setXmlBind(1);

componentView.subscribe(jsx3.gui.Interactive.AFTER_RESIZE_VIEW, function() {
  tibco.ce.onComponentViewChanged(componentView, viewSourceShowButton);
});
  ]]></onAfterDeserialize>
  <object type="jsx3.gui.Block">
    <variants jsxrelativeposition="1"/>
    <strings jsxname="root" jsxwidth="100%" jsxheight="100%"/>
    <object type="jsx3.gui.LayoutGrid">
      <variants jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
      <strings jsxname="lytHeader" jsxrows="110,*" jsxwidth="100%" jsxheight="100%"/>
      <object type="jsx3.gui.Block">
        <variants jsxoverflow="2"/>
        <strings jsxname="paneHeader" jsxwidth="100%" jsxheight="100%"/>
        <dynamics jsxborder="@Outset Bottom"/>
        <object type="jsx3.gui.Image">
          <variants jsxoverflow="2" jsxrelativeposition="1"/>
          <strings jsxname="image" jsxsrc="images/headerBar.jpg"/>
        </object>
        <object type="jsx3.gui.Image">
          <variants jsxoverflow="2" jsxrelativeposition="0" jsxleft="0" jsxtop="20"/>
          <strings jsxname="image" jsxsrc="images/GI_logo.png" jsxdisplay=""/>
        </object>
      </object>
      <object type="jsx3.gui.LayoutGrid">
        <variants jsxrelativeposition="1" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
        <strings jsxname="lytWorkspace" jsxcols="250,*" jsxwidth="100%" jsxheight="100%" jsxdisplay="" jsxbgcolor="#dfdfdf"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1"/>
          <strings jsxname="block" jsxwidth="100%" jsxheight="100%" jsxpadding="8 5 8 20"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxrelativeposition="1" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
            <strings jsxname="lytLeft" jsxrows="30,30,*" jsxwidth="100%" jsxheight="100%" jsxdisplay=""/>
            <dynamics jsxborder="@Outset"/>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2" jsxfontsize="12"/>
              <strings jsxname="paneExplorerTitle" jsxwidth="100%" jsxheight="100%" jsxtext="Component Explorer" jsxbgcolor="#dfdfdf" jsxpadding="5 0 0 8"/>
              <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown"/>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxname="paneSearch" jsxwidth="100%" jsxheight="100%" jsxbgcolor="#dfdfdf" jsxpadding="4 10 4 10"/>
              <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown"/>
              <object type="jsx3.gui.TextBox">
                <variants jsxheight="20" jsxwidth="178"/>
                <strings jsxname="search_textbox" jsxmargin="0 0 0 0" jsxvalue="Search" jsxpadding="2 20 2 2"/>
                <dynamics jsxcolor="@Disabled"/>
                <events jsxexecute="tibco.ce.onSearch(this);" jsxfocus="tibco.ce.onSearchFocus(this);" jsxblur="tibco.ce.onSearchBlur(this);" jsxincchange="tibco.ce.onSearchIncChange(this, strVALUE);"/>
              </object>
              <object type="jsx3.gui.ImageButton">
                <variants jsxwidth="24" jsxheight="19" jsxprefetch="1" jsxtype="0" jsxstate="0"/>
                <strings jsxname="imagebutton" jsxtext="Clear Search" jsximage="images/btnSearch-default.gif" jsxoverimage="images/btnSearch-over.gif" jsxdownimage="images/btnSearch-clicked.gif" jsxonimage="jsx:///images/imagebutton/on.gif" jsxdisabledimage="jsx:///images/imagebutton/disabled.gif"/>
                <events jsxexecute="tibco.ce.onSearch(search_textbox);"/>
              </object>
              <object type="jsx3.gui.Image">
                <variants jsxoverflow="2" jsxrelativeposition="0" jsxleft="170" jsxtop="7" jsxdrag="0" jsxdrop="0" jsxmove="0"/>
                <strings jsxname="search_clear" jsxsrc="images/clearSearch.gif" jsxdisplay="none"/>
                <dynamics jsxcursor="@Hand"/>
                <events jsxdrag="false;" jsxclick="tibco.ce.onSearchClear(search_textbox);"/>
              </object>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="1"/>
              <strings jsxname="block" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1" jsxpadding="5 5 5 5"/>
              <dynamics jsxborder="@Outset" jsxbgcolor="@Solid Light"/>
              <object type="jsx3.gui.Tree">
                <variants jsxxmlasync="0" jsxmultiselect="0" jsxdrag="0" jsxdrop="0" jsxuseroot="0" jsxxmlbind="0"/>
                <strings jsxname="treeExplorer" jsxwidth="100%" jsxheight="100%" jsxvalue="1" jsxicon="" jsxpadding="5 5 5 5" jsxxmlid=""/>
                <events jsxselect="tibco.ce.componentSelect(this, strRECORDID);"/>
                <xslparameters jsx_no_empty_indent="1"/>
              </object>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1"/>
          <strings jsxname="block" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1" jsxpadding="8 20 8 5"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
            <strings jsxname="lytContent" jsxrows="30,*" jsxwidth="100%" jsxheight="100%"/>
            <dynamics jsxborder="@Outset" jsxbgcolor="@Solid Light"/>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2" jsxfontsize="12"/>
              <strings jsxname="paneContentHeader" jsxwidth="100%" jsxheight="100%" jsxtext="Block &amp;raquo; Block &amp;raquo; Relative" jsxbgcolor="#dfdfdf" jsxpadding="5 0 0 8"/>
              <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown"/>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="1"/>
              <strings jsxname="block" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1"/>
              <object type="jsx3.gui.TabbedPane">
                <variants selectedIndex="2" jsxselectedindex="0" jsxshowtabs="0"/>
                <strings jsxname="paneContentContainer" jsxtextalign="0"/>
                <object type="jsx3.gui.Tab">
                  <variants jsxzindex="3" jsxheight="20"/>
                  <strings jsxname="welcome_tab" jsxtext="Tab 1" jsxbgcolor="#d8d8e5"/>
                  <object type="jsx3.gui.Block">
                    <variants jsxoverflow="1" jsxrelativeposition="1"/>
                    <strings jsxname="welcomeView" jsxwidth="100%" jsxheight="100%" jsxdisplay="" jsxvisibility="" jsxpadding="8"/>
                    <object type="jsx3.gui.Block">
                      <variants jsxrelativeposition="1" jsxoverflow="3"/>
                      <strings jsxname="h1" jsxtagname="h1" jsxtext="Welcome to the General Interface Component Explorer" jsxpadding="0 0 0 0" jsxmargin="0 0 5 0"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxfontsize="12"/>
                      <strings jsxname="text" jsxwidth="100%" jsxtext="This component explorer allows you to view the wide range of controls that are part of the General Interface platform.  Browse common variations of the GI controls and then copy the source code for use in your application."/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxrelativeposition="1" jsxoverflow="3"/>
                      <strings jsxname="h2" jsxtagname="h2" jsxtext="How to Use" jsxmargin="20 0 0 0"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxfontsize="12"/>
                      <strings jsxname="text" jsxwidth="100%" jsxtext="&lt;ol&gt;&lt;li&gt;Click on a component in the tree on the left of the screen.  The component will load in this pane.&lt;/li&gt;&lt;li&gt;Some components are interactive.  You may be able to interact with a component with the mouse or customize a component with the provided controls.&lt;/li&gt;&lt;li&gt;If you are building a GI application and want to include similar functionality in it, open up the source code browser by clicking the button on the bottom right.  You can copy or download the source code for each component.&lt;/li&gt;&lt;/ol&gt;"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxrelativeposition="1" jsxoverflow="3"/>
                      <strings jsxname="h2" jsxtagname="h2" jsxtext="Getting Started with General Interface"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxfontsize="12"/>
                      <strings jsxname="text" jsxwidth="100%" jsxtext="Want to get started building your own GI applications?  Here's where to get started."/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxfontsize="12"/>
                      <strings jsxname="text" jsxwidth="100%" jsxtext="&lt;ul&gt;                       &lt;li&gt;&lt;a href=&quot;http://www.generalinterface.org/alias/download&quot;&gt;Download GI&lt;/a&gt;&lt;/li&gt;                       &lt;li&gt;&lt;a href=&quot;http://www.generalinterface.org/alias/userguide/&quot;&gt;Read the Getting Started Guide&lt;/a&gt;&lt;/li&gt;                       &lt;li&gt;&lt;a href=&quot;http://www.generalinterface.org/alias/forum_dev&quot;&gt;Visit the discussion forums&lt;/a&gt;&lt;/li&gt;                       &lt;/ul&gt;"/>
                    </object>
                  </object>
                </object>
                <object type="jsx3.gui.Tab">
                  <variants jsxzindex="3" jsxheight="18"/>
                  <strings jsxname="loading_tab" jsxtext="Tab 2" jsxbgcolor="#d8d8e5"/>
                  <object type="jsx3.gui.Block">
                    <variants jsxoverflow="1" jsxrelativeposition="1"/>
                    <strings jsxname="loadingView" jsxdisplay="none" jsxpadding="5 5 5 5" jsxvisibility=""/>
                    <object type="jsx3.gui.Block">
                      <variants jsxwidth="200" jsxheight="30" jsxoverflow="1" jsxrelativeposition="0"/>
                      <strings jsxleft="40%" jsxtop="40%" jsxname="block" jsxtext="" jsxtextalign="center" jsxpadding="5" jsxbgcolor="#dfdfdf"/>
                      <object type="jsx3.gui.Block">
                        <variants jsxrelativeposition="1" jsxoverflow="3"/>
                        <strings jsxname="label" jsxtext="Loading Component" jsxpadding="0 10 0 0"/>
                      </object>
                      <object type="jsx3.gui.Image">
                        <variants jsxoverflow="2" jsxrelativeposition="1"/>
                        <strings jsxname="image" jsxsrc="images/loading.gif"/>
                      </object>
                    </object>
                  </object>
                </object>
                <object type="jsx3.gui.Tab">
                  <variants jsxzindex="3" jsxheight="18"/>
                  <strings jsxname="component_tab" jsxtext="Tab 3" jsxbgcolor="#e8e8f5"/>
                  <events jsxshow="tibco.ce.onComponentViewChanged(componentView, viewSourceShowButton);"/>
                  <object type="jsx3.gui.Block">
                    <variants jsxoverflow="1" jsxrelativeposition="1"/>
                    <strings jsxname="componentView" jsxwidth="100%" jsxheight="100%" jsxdisplay="none" jsxvisibility=""/>
                    <object type="jsx3.gui.Block">
                      <variants jsxoverflow="1"/>
                      <strings jsxname="componentViewContainer" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxoverflow="3" jsxheight="25" jsxrelativeposition="0" jsxleft="233" jsxtop="411"/>
                      <strings jsxname="viewSourceShowButton" jsxtext="&amp;#x25b2; View Source" jsxtextalign="center" jsxpadding="4" jsxfontweight="bold" jsxdisplay="" jsxclassname="sourceButton" jsxstyleoverride="z-index: 1000;"/>
                      <dynamics jsxborder="@Outset" jsxbg="@Bevel TopDown" jsxcursor="@Hand" jsxbgcolor="@Solid Shadow" jsxwidth="@View Source Width"/>
                      <properties onmouseover="tibco.ce.onMouseOverSource(this);" onmouseout="tibco.ce.onMouseOutSource(this);"/>
                      <events jsxclick="tibco.ce.viewSource(componentSourceContainer);"/>
                    </object>
                    <object type="jsx3.gui.Block">
                      <variants jsxoverflow="3" jsxrelativeposition="0" jsxleft="0" jsxzindex="4000"/>
                      <strings jsxname="componentSourceContainer" jsxwidth="100%" jsxheight="50%" jsxtop="50%" jsxdisplay="none"/>
                      <dynamics jsxbgcolor="@Solid Light"/>
                      <object type="jsx3.gui.LayoutGrid">
                        <variants jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
                        <strings jsxname="layoutRows" jsxrows="25,*" jsxwidth="100%" jsxheight="100%"/>
                        <object type="jsx3.gui.Block">
                          <variants jsxoverflow="3"/>
                          <strings jsxname="pane1" jsxwidth="100%" jsxheight="100%"/>
                          <dynamics jsxborder="@Outset"/>
                          <object type="jsx3.gui.LayoutGrid">
                            <variants jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
                            <strings jsxname="layoutCols" jsxwidth="100%" jsxheight="100%"/>
                            <dynamics jsxcols="@Root Cols"/>
                            <object type="jsx3.gui.Block">
                              <variants jsxoverflow="2"/>
                              <strings jsxname="pane1" jsxwidth="100%" jsxheight="100%"/>
                              <dynamics jsxbgcolor="@Solid Shadow" jsxbg="@Bevel TopDown"/>
                              <object type="jsx3.gui.WindowBar">
                                <variants jsxbartype="1"/>
                                <strings jsxname="toolBar"/>
                                <dynamics jsxbg="@No BG Image" jsxbgcolor="@Transparent BG"/>
                                <object type="jsx3.gui.ToolbarButton">
                                  <variants/>
                                  <strings jsxname="toolBarBtn" jsximage="images/icon_1.gif" jsxtext="Copy Code"/>
                                  <events jsxexecute="tibco.ce.onCopySource(sourceView);"/>
                                </object>
                                <object type="jsx3.gui.ToolbarButton">
                                  <variants/>
                                  <strings jsxname="toolBarBtn" jsximage="images/icon_13.gif" jsxtext="Download File"/>
                                  <events jsxexecute="tibco.ce.onDownloadFile();"/>
                                </object>
                              </object>
                            </object>
                            <object type="jsx3.gui.Block">
                              <variants jsxoverflow="3"/>
                              <strings jsxname="pane2" jsxwidth="100%" jsxheight="100%" jsxtext="&amp;#x25bc; View Source" jsxfontweight="bold" jsxpadding="4 0 0 0" jsxtextalign="center" jsxclassname="sourceButton"/>
                              <dynamics jsxcursor="@Hand" jsxbgcolor="@Solid Shadow" jsxbg="@Bevel TopDown"/>
                              <properties onmouseover="tibco.ce.onMouseOverSource(this);" onmouseout="tibco.ce.onMouseOutSource(this);"/>
                              <events jsxclick="tibco.ce.unViewSource(componentSourceContainer);"/>
                            </object>
                          </object>
                        </object>
                        <object type="jsx3.gui.Block">
                          <variants jsxoverflow="3"/>
                          <strings jsxname="pane2" jsxwidth="100%" jsxheight="100%" jsxpadding="2 2 2 2"/>
                          <dynamics jsxborder="@Outset"/>
                          <object type="jsx3.gui.Block">
                            <variants jsxrelativeposition="1" jsxoverflow="1"/>
                            <strings jsxwidth="100%" jsxheight="100%" jsxname="sourceView" jsxclassname="prettyxml" jsxstyleoverride="white-space:pre;"/>
                            <dynamics jsxbgcolor="@Solid Light" jsxpadding="@8Pixel" jsxborder="@Inset"/>
                          </object>
                        </object>
                      </object>
                    </object>
                  </object>
                </object>
              </object>
            </object>
          </object>
        </object>
      </object>
    </object>
  </object>
</serialization>
