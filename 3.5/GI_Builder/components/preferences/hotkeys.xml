<?xml version="1.0" ?>
<!--
  ~ Copyright (c) 2001-2007, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  -->
<serialization xmlns="urn:tibco.com/v3.0">
  <name><![CDATA[IDE Hot Keys]]></name>
  <icon><![CDATA[images/prefs/hotkeys.gif]]></icon>
  <description><![CDATA[Customize hot key shortcuts of General Interface&#8482; Builder.]]></description>
  <onBeforeDeserialize><![CDATA[]]></onBeforeDeserialize>
  <onAfterDeserialize><![CDATA[

objJSX.getFirstResponder = function() {
  return this.getDescendantOfName("hotkeylist");
};

objJSX.savePrefs = function() {
  var hkList = this.getDescendantOfName("hotkeylist");
  var hotkeys = {};

  var records = hkList.getXML().selectNodes("//record");
  for (var i = records.iterator(); i.hasNext(); ) {
    var record = i.next();
    var keycode = record.getAttribute("keycode");
    var jsxdefault = record.getAttribute("jsxdefault");
    var jsxid = record.getAttribute("jsxid");

    if (keycode != jsxdefault) {
      hotkeys[jsxid] = keycode;
    }
  }

  var prefs = jsx3.ide.getIDESettings(true);
  prefs.set("hotkeys", hotkeys);
  prefs.save();

  return {title: "Restart Required",
      message: "You must restart General Interface&#8482; Builder for the changes to take effect."};
};

objJSX.loadPrefs = function() {
  var hkList = this.getDescendantOfName("hotkeylist");
  var prefs = jsx3.ide.getIDESettings().get("hotkeys") || {};

  var menuBar = jsx3.IDE.getJSXByName("jsxmenubar");
  var menus = menuBar.getChildren();
  for (var i = 0; i < menus.length; i++) {
    var menu = menus[i];
    if (!(menu instanceof jsx3.gui.Menu)) continue;

    var j = menu.getXML().selectNodeIterator("//record[@config='true']");
    while (j.hasNext()) {
      var record = j.next();
      var newRec = {};
      newRec.jsxid = jsx3.ide.getMenuIdForHotKey(menu, record);
      newRec.path = jsx3.ide.getMenuPath(menu, record);
      newRec.jsxdefault = record.getAttribute("jsxdefault");

      var kcattr = record.getAttribute("jsxkeycode");
      if (newRec.jsxdefault == null)
        newRec.jsxdefault = kcattr;

      if (prefs[newRec.jsxid] == null || prefs[newRec.jsxid] == newRec.jsxdefault) {
        newRec.keycode = kcattr;
        newRec.unchanged = "true";
      } else {
        newRec.keycode = prefs[newRec.jsxid];
      }

      if (newRec.keycode) {
        try {
          var hk = jsx3.gui.HotKey.valueOf(newRec.keycode);
          newRec.keycodeformatted = hk.getFormatted();
        } catch (e) { jsx3.ide.LOG.warn("Error parsing hot key string '" + newRec.keycode + "'."); }
      }

      hkList.insertRecord(newRec, null, false);
    }
  }

  hkList.repaintData();
};

objJSX.doChoose = function(objList, strRecordId) {
  var d = this.load("components/preferences/hotkeys-dialog.xml");
  d.subscribe("default", this, "onSetDefault");
  d.subscribe("set", this, "onSetKey");
  d.onInit(this.getDescendantOfName("hotkeylist").getRecordNode(strRecordId).getAttribute("path"));
  d.focus();
};

objJSX.onSetDefault = function(objEvent) {
  var hkList = this.getDescendantOfName("hotkeylist");
  var keyId = hkList.getValue();
  var recordNode = hkList.getRecordNode(keyId);
  hkList.insertRecordProperty(keyId, "keycode", recordNode.getAttribute("jsxdefault"), false);
  if(recordNode.getAttribute("jsxdefault")) {
    var hk = jsx3.gui.HotKey.valueOf(recordNode.getAttribute("jsxdefault"));
    hkList.insertRecordProperty(keyId, "keycodeformatted", hk.getFormatted());
  } else {
    hkList.deleteRecordProperty(keyId, "keycodeformatted");
  }
  hkList.insertRecordProperty(keyId, "unchanged", "true", true);
  this.makeDirty();
};

objJSX.onSetKey = function(objEvent) {
  var hkList = this.getDescendantOfName("hotkeylist");
  var keyId = hkList.getValue();
  hkList.insertRecordProperty(keyId, "keycode", objEvent.key);
  var hk = jsx3.gui.HotKey.valueOf(objEvent.key);
  hkList.insertRecordProperty(keyId, "keycodeformatted", hk.getFormatted());
  hkList.deleteRecordProperty(keyId, "unchanged", true);
  this.makeDirty();
};

objJSX.makeDirty = function() {
  jsx3.ide.PrefsPane.getPane(this).setDirty(true);
};

  ]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="3" jsxrelativeposition="0" jsxleft="0" jsxtop="0"/>
      <strings jsxname="prefspane" jsxwidth="100%" jsxheight="100%" jsxpadding="8 8 4 8" jsxhelpid="ide.prefs.hotkeys"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants/>
            <strings jsxname="layout (--)" jsxrows="32,*"/>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxname="pane" jsxwidth="100%" jsxheight="100%" jsxtext="Double-click on a row in the list to set the hot key for that menu item. Changes take effect after restarting the IDE."/>
              </object>
              <object type="jsx3.gui.Block">
              <dynamics jsxbgcolor="@Solid Medium" jsxborder="@Inset"/>
              <variants jsxoverflow="2"/>
              <strings jsxname="block" jsxwidth="100%" jsxheight="100%"/>
                <object type="jsx3.gui.Matrix">
                  <dynamics jsxbgcolor="@Solid Light" jsxheaderborder="@Outset NoBottom"/>
                  <variants jsxselectionmodel="1" jsxscalewidth="1" jsxresize="1" jsxreorder="0" jsxheaderheight="21"/>
                  <strings jsxname="hotkeylist" jsxbodyborder="1px solid #d8d8e5" jsxfocusstyle=";"/>
                  <events jsxexecute="this.getAncestorOfName('prefspane').doChoose(this, strRECORDID);"/>
                  <xslparameters jsx_rowbg1="#ffffff"/>
                    <object type="jsx3.gui.Matrix.Column">
                      <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset"
               jsxcellbgcolor="@Matrix AllCol BG" jsxcellborder="@Matrix AllCol Border"/>
                      <strings jsxname="abclist_col1" jsxcellpadding="3" jsxpadding="3" jsxwidth="*" jsxpath="path" jsxtext="Menu" />
                    </object>
                    <object type="jsx3.gui.Matrix.Column">
                      <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset NoRight"
               jsxcellbgcolor="@Matrix AllCol BG" jsxcellborder="@Matrix AllCol Border"/>
                      <strings jsxname="abclist_col2" jsxcellpadding="3" jsxpadding="3" jsxwidth="135" jsxpath="keycodeformatted"
                          jsxtext="Key" jsxvaluetemplate="&lt;xsl:template xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;  &lt;xsl:choose&gt;    &lt;xsl:when test=&quot;{0} and not({0}='')&quot;&gt;      &lt;xsl:if test=&quot;@unchanged&quot;&gt;&lt;xsl:attribute name=&quot;style&quot;&gt;color:#9898a5;&lt;/xsl:attribute&gt;&lt;/xsl:if&gt;      &lt;xsl:value-of select=&quot;{0}&quot;/&gt;&lt;/xsl:when&gt;    &lt;xsl:otherwise&gt;&lt;xsl:text&gt;&amp;#160;&lt;/xsl:text&gt;&lt;/xsl:otherwise&gt;  &lt;/xsl:choose&gt;&lt;/xsl:template&gt;"
                          jsxcellfontname="Lucida Grande, Verdana, sans-serif"/>
                    </object>
                </object>
            </object>
        </object>
    </object>
</serialization>
